// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	alert "github.com/Z3Labs/Hackathon/backend/internal/handler/alert"
	apps "github.com/Z3Labs/Hackathon/backend/internal/handler/apps"
	deployments "github.com/Z3Labs/Hackathon/backend/internal/handler/deployments"
	machines "github.com/Z3Labs/Hackathon/backend/internal/handler/machines"
	monitoring "github.com/Z3Labs/Hackathon/backend/internal/handler/monitoring"
	"github.com/Z3Labs/Hackathon/backend/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/ping",
				Handler: PingHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/apps",
				Handler: apps.CreateAppHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/api/v1/apps/:id",
				Handler: apps.UpdateAppHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/v1/apps",
				Handler: apps.GetAppListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/v1/apps/:id",
				Handler: apps.GetAppDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/v1/apps/versions",
				Handler: apps.GetAppVersionsHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/deployments",
				Handler: deployments.CreateDeploymentHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/api/v1/deployments/:id",
				Handler: deployments.UpdateDeploymentHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/v1/deployments",
				Handler: deployments.GetDeploymentListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/v1/deployments/:id",
				Handler: deployments.GetDeploymentDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/deployments/:id/cancel",
				Handler: deployments.CancelDeploymentHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/deployments/:id/rollback",
				Handler: deployments.RollbackDeploymentHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/deployments/:id/node-deployments/rollback",
				Handler: deployments.RollbackNodeDeploymentHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/deployments/:id/node-deployments/deploy",
				Handler: deployments.DeployNodeDeploymentHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/deployments/:id/node-deployments/retry",
				Handler: deployments.RetryNodeDeploymentHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/deployments/:id/node-deployments/skip",
				Handler: deployments.SkipNodeDeploymentHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/deployments/:id/node-deployments/cancel",
				Handler: deployments.CancelNodeDeploymentHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/api/v1/metrics/query",
				Handler: monitoring.QueryMetricsHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/machines",
				Handler: machines.CreateMachineHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/api/v1/machines/:id",
				Handler: machines.UpdateMachineHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/v1/machines",
				Handler: machines.GetMachineListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/v1/machines/:id",
				Handler: machines.GetMachineDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/v1/machines/:id",
				Handler: machines.DeleteMachineHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/machines/:id/test",
				Handler: machines.TestMachineConnectionHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/machines/hostname",
				Handler: machines.GetMachineHostnameHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/v1/alerts",
				Handler: alert.AlertCallBackHandler(serverCtx),
			},
		},
	)
}
